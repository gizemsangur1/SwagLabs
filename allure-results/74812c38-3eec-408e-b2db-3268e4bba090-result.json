{"name": "test_logout", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "def test_logout():\n    \ttry:\n    \t\tdriver.get(\"https://www.saucedemo.com/\")\n    \t\tdriver.maximize_window()\n    \t\ttime.sleep(1)\n    \n    \t\tdriver.find_element(By.ID, \"user-name\").send_keys(\"standard_user\")\n    \t\tdriver.find_element(By.ID, \"password\").send_keys(\"secret_sauce\")\n    \t\tdriver.find_element(By.ID, \"login-button\").click()\n    \t\ttime.sleep(2)\n    \n    \t\tmenu_button=driver.find_element(By.ID,\"react-burger-menu-btn\")\n    \t\tmenu_button.click()\n    \n    \t\twait = WebDriverWait(driver, 10)\n>   \t\tlogout_button = wait.until(EC.element_to_be_clickable((By.ID, \"logout_sidebar_link\")))\n\ntest_logout.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"655688ec79ca75d7ec1778993f2a40fa\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x00000220651D0A60>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nC:\\Users\\gizem\\AppData\\Roaming\\Python\\Python310\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "start": 1751979809504, "stop": 1751979828724, "uuid": "4e554514-cfad-42a5-9362-8c5566b2ab7e", "historyId": "16deb2debcd74e475ae76638c02a4c77", "testCaseId": "16deb2debcd74e475ae76638c02a4c77", "fullName": "test_logout#test_logout", "labels": [{"name": "suite", "value": "test_logout"}, {"name": "host", "value": "Gizem"}, {"name": "thread", "value": "4916-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_logout"}]}