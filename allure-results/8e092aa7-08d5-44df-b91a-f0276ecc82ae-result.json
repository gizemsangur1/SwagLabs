{"name": "test_logout", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=138.0.7204.97)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff74e596f95+76917]\n\tGetHandleVerifier [0x0x7ff74e596ff0+77008]\n\t(No symbol) [0x0x7ff74e349c1c]\n\t(No symbol) [0x0x7ff74e3a1754]\n\t(No symbol) [0x0x7ff74e393368]\n\t(No symbol) [0x0x7ff74e3c846a]\n\t(No symbol) [0x0x7ff74e392c16]\n\t(No symbol) [0x0x7ff74e3c8680]\n\t(No symbol) [0x0x7ff74e3f065c]\n\t(No symbol) [0x0x7ff74e3c8243]\n\t(No symbol) [0x0x7ff74e391431]\n\t(No symbol) [0x0x7ff74e3921c3]\n\tGetHandleVerifier [0x0x7ff74e86d2cd+3051437]\n\tGetHandleVerifier [0x0x7ff74e867923+3028483]\n\tGetHandleVerifier [0x0x7ff74e8858bd+3151261]\n\tGetHandleVerifier [0x0x7ff74e5b185e+185662]\n\tGetHandleVerifier [0x0x7ff74e5b971f+218111]\n\tGetHandleVerifier [0x0x7ff74e59fb14+112628]\n\tGetHandleVerifier [0x0x7ff74e59fcc9+113065]\n\tGetHandleVerifier [0x0x7ff74e586c98+10616]\n\tBaseThreadInitThunk [0x0x7ffe288ce8d7+23]\n\tRtlUserThreadStart [0x0x7ffe29f1c34c+44]", "trace": "def test_logout():\n    \ttry:\n    \t\tdriver.get(\"https://www.saucedemo.com/\")\n    \t\tdriver.maximize_window()\n    \t\ttime.sleep(1)\n    \n    \t\tdriver.find_element(By.ID, \"user-name\").send_keys(\"standard_user\")\n    \t\tdriver.find_element(By.ID, \"password\").send_keys(\"secret_sauce\")\n    \t\tdriver.find_element(By.ID, \"login-button\").click()\n    \t\ttime.sleep(2)\n    \n    \t\tmenu_button=driver.find_element(By.ID,\"react-burger-menu-btn\")\n    \t\tmenu_button.click()\n    \t\ttime.sleep(1)\n    \n    \t\tlogout_button=driver.find_element(By.ID,\"logout_sidebar_link\")\n>   \t\tlogout_button.click()\n\ntest_logout.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Users\\gizem\\AppData\\Roaming\\Python\\Python310\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\gizem\\AppData\\Roaming\\Python\\Python310\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\gizem\\AppData\\Roaming\\Python\\Python310\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002457F5B27D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...ff74e586c98+10616]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffe288ce8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffe29f1c34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=138.0.7204.97)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff74e596f95+76917]\nE       \tGetHandleVerifier [0x0x7ff74e596ff0+77008]\nE       \t(No symbol) [0x0x7ff74e349c1c]\nE       \t(No symbol) [0x0x7ff74e3a1754]\nE       \t(No symbol) [0x0x7ff74e393368]\nE       \t(No symbol) [0x0x7ff74e3c846a]\nE       \t(No symbol) [0x0x7ff74e392c16]\nE       \t(No symbol) [0x0x7ff74e3c8680]\nE       \t(No symbol) [0x0x7ff74e3f065c]\nE       \t(No symbol) [0x0x7ff74e3c8243]\nE       \t(No symbol) [0x0x7ff74e391431]\nE       \t(No symbol) [0x0x7ff74e3921c3]\nE       \tGetHandleVerifier [0x0x7ff74e86d2cd+3051437]\nE       \tGetHandleVerifier [0x0x7ff74e867923+3028483]\nE       \tGetHandleVerifier [0x0x7ff74e8858bd+3151261]\nE       \tGetHandleVerifier [0x0x7ff74e5b185e+185662]\nE       \tGetHandleVerifier [0x0x7ff74e5b971f+218111]\nE       \tGetHandleVerifier [0x0x7ff74e59fb14+112628]\nE       \tGetHandleVerifier [0x0x7ff74e59fcc9+113065]\nE       \tGetHandleVerifier [0x0x7ff74e586c98+10616]\nE       \tBaseThreadInitThunk [0x0x7ffe288ce8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffe29f1c34c+44]\n\nC:\\Users\\gizem\\AppData\\Roaming\\Python\\Python310\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException"}, "start": 1751979588995, "stop": 1751979598908, "uuid": "6c35b992-4546-4b7f-84f3-fe212271ec19", "historyId": "16deb2debcd74e475ae76638c02a4c77", "testCaseId": "16deb2debcd74e475ae76638c02a4c77", "fullName": "test_logout#test_logout", "labels": [{"name": "suite", "value": "test_logout"}, {"name": "host", "value": "Gizem"}, {"name": "thread", "value": "6792-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_logout"}]}